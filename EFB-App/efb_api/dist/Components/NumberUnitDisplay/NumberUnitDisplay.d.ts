import { AbstractNumberUnitDisplay, AbstractNumberUnitDisplayProps, NumberUnitInterface, SubscribableSet, ToggleableClassNameRecord, Unit, VNode } from '@microsoft/msfs-sdk';

/**
 * Component props for NumberUnitDisplay.
 */
export interface NumberUnitDisplayProps<F extends string> extends AbstractNumberUnitDisplayProps<F> {
    /** A function which formats numbers. */
    formatter?: (number: number) => string;
    /**
     * A function which formats units. The formatted unit text should be written to the 2-tuple passed to the `out`
     * parameter, as `[bigText, smallText]`. `bigText` and `smallText` will be rendered into separate `<span>` elements
     * representing the big and small components of the rendered unit text, respectively. If not defined, then units
     * will be formatted based on the text generated by the {@link UnitFormatter} class.
     */
    unitFormatter?: (out: [string, string], unit: Unit<F>, number: number) => void;
    /** Whether to hide the unit text when the displayed value is equal to `NaN`. Defaults to `false`. */
    hideUnitWhenNaN?: boolean;
    /** CSS class(es) to add to the root of the icon component. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A component which displays a number with units.
 */
export declare class NumberUnitDisplay<F extends string> extends AbstractNumberUnitDisplay<F, NumberUnitDisplayProps<F>> {
    private static readonly DEFAULT_UNIT_TEXT_MAP;
    /**
     * A function which formats units to default text for NumberUnitDisplay.
     * @param out The 2-tuple to which to write the formatted text, as `[bigText, smallText]`.
     * @param unit The unit to format.
     */
    static readonly DEFAULT_UNIT_FORMATTER: (out: [string, string], unit: Unit<any>) => void;
    private static readonly unitTextCache;
    private readonly formatter;
    private readonly unitFormatter;
    private readonly unitTextBigDisplay;
    private readonly unitTextSmallDisplay;
    private readonly numberText;
    private readonly unitTextBig;
    private readonly unitTextSmall;
    /** @inheritdoc */
    protected onValueChanged(value: NumberUnitInterface<F>): void;
    /** @inheritdoc */
    protected onDisplayUnitChanged(displayUnit: Unit<F> | null): void;
    /**
     * Updates this component's displayed number and unit text.
     * @param value The value to display.
     * @param displayUnit The unit type in which to display the value, or `null` if the value should be displayed in its
     * native unit type.
     */
    private updateDisplay;
    /**
     * Updates whether this component's unit text spans are visible.
     * @param numberValue The numeric value displayed by this component.
     * @param unitTextBig The text to display in the big text span.
     * @param unitTextSmall The text to display in the small text span.
     */
    private updateUnitTextVisibility;
    /**
     * Creates the default mapping from unit to displayed text.
     * @returns The default mapping from unit to displayed text.
     */
    private static createDefaultUnitTextMap;
    render(): VNode;
}
//# sourceMappingURL=NumberUnitDisplay.d.ts.map